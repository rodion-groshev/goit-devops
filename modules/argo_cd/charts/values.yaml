applications:
  - name: example-app   # ім’я застосунку в Argo CD
    namespace: default  # namespace у Kubernetes
    project: default    #  назва Argo CD проєкту
    source:             # джерело коду застосунку
      # repoURL: https://github.com/YOUR_USERNAME/example-repo.git
      repoURL: ${github_repo_url} # посилання на Git-репозиторій, де зберігаються Helm chart або Kubernetes маніфести
      path: charts/django-app     # шлях усередині репозиторію до потрібного чарта або YAML-файлів
      targetRevision: lesson-8-9    # гілка або тег Git, з якого брати застосунок (наприклад, main)
      helm:
        valueFiles:               # перелік YAML-файлів із налаштуваннями, які будуть передані Helm-чарту
          - values.yaml
    destination:                              # вказує, куди саме деплоїти застосунок
      server: https://kubernetes.default.svc  # адреса Kubernetes API-сервера. Для внутрішнього кластера використовується https://kubernetes.default.svc
      namespace: default                      # Kubernetes namespace для цього конкретного застосунку
    syncPolicy:           # політика синхронізації
      automated:          # включає автоматичне застосування змін
        prune: true       # видаляти ресурси, які більше не описані у Git
        selfHeal: true    # автоматично виправляти відхилення від Git-стану, якщо щось змінилось вручну у кластері

repositories:
  - name: example-app         # ім’я репозиторію для внутрішнього використання
    # url: https://github.com/YOUR_USERNAME/example-repo.git
    url: ${github_repo_url}   # повна URL-адреса Git-репозиторію
    username: ${github_username}  # облікові дані для доступу до приватного репозиторію
    password: ${github_token}

repoConfig:
  insecure: "true"    # дозволяє підключення до репозиторію без перевірки SSL-сертифікатів. Не рекомендується для продакшену
  enableLfs: "true"   # дозволяє використання Git LFS (Large File Storage), якщо в репозиторії зберігаються великі файли
